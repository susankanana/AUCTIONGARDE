@inject ILocalStorageService localStorage

<html>
<head>
    <style>
 
        .nav_bar_wapper {
            display:flex;
            justify-content:space-between;
            align-items:center;
            padding:0 20px;
          
        }

        .navbar-title {
            margin: 0;
        }
        .navbar-icons
        {
            display:flex;
            gap:1rem;
        }

        .navbar-icons i {
            font-size: 1.5em;
            color: #48BE1E;
        }

        .page {
            /* position: relative; */
            display: flex;
            flex-direction: row;
        }

}

    </style>
</head>
<body>
    <div class="nav_bar_wapper">
    <div class="sidebar">
        <NavMenu />
    </div>


        <h1 class="navbar-title"><span style="color: #E9B6FB">Auction</span><span style="color:#48BE1E">Garde</span></h1>
        <div class="navbar-icons">
           <AuthorizeView>
            <Authorized>
                <p style="color: #E9B6FB; padding-top: 7px; font-size: 20px">Hello @name</p>
                    <div  @onclick="logOut"> <i class="material-icons" style="font-size:40px">logout</i></div>
            </Authorized>
            <NotAuthorized>
                    <a href="/auctionbuy"><i class="material-icons" style="font-size:40px">search</i></a>
                    <a href="/login"> <i class="material-icons" style="font-size:40px">person</i></a>
                    
            </NotAuthorized>
           
            </AuthorizeView>
        </div>
    </div>
 
</body>
</html>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> authSate { get; set; }
    public string name { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var state = await authSate;
        name = state.User.FindFirst("name")?.Value;
    }
    public async Task logOut()
    {
        var existingToken = await localStorage.GetItemAsStringAsync("authToken");

        if (!string.IsNullOrEmpty(existingToken))
        {
            await localStorage.RemoveItemAsync("authToken");
        }
       
    }
}
