@page "/auctionstate"
@inject HttpClient Http
@inject ILocalStorageService _localStorage
@inject IUser _userService
@inject IBid _bidService
@inject IArt _artService
@inject IOrder _orderService
@inject NavigationManager _navigationManager
<html>
<head>
    <link rel="stylesheet" href="/css/AuctionState.css" />
</head>
<body>
    <TopNavBar></TopNavBar>
    <div class="container_bid">
        
        <p class="title_top">Bid progress</p>
        @foreach(var bid in bids){
           bool isClosed = bid.expiryTime < DateTime.Now;
            bool isWon = bid.highestBid == bid.bidAmount;
            <div class="card_container">
            <img src="@getBidImage(bid.artId)"/>
            <div>
                    <p>@getBidName(bid.artId)</p>
                    @* <p>@(bid.State == "closed" ? "Bidding closed" : "Bidding open")</p> *@
                    <p>@showStringState(isWon,isClosed,bid)</p>
            </div>
            <div>
                <p>Your bid @bid.bidAmount</p>
                <p>Highest bid @bid.highestBid</p>
            </div>
            <div>
                    <button class="button_email" @onclick="() => HandleButtonClick(bid, showStringState(isWon, isClosed, bid))">
                        @updatebutton(showStringState(isWon, isClosed, bid))
                    </button>
                </div>
        </div>
        }

</div>
</body>
</html>

@code {
    public List<User> users = new List<User>();
    public List<Art> arts = new List<Art>();
    public List<Bid> bids = new List<Bid>();
    public AddOrderDto order = new AddOrderDto();
    public User activeUser;
    protected override async Task OnInitializedAsync()
    {
        var userId = await _localStorage.GetItemAsStringAsync("userId");
        activeUser = await _userService.GetUserById(userId);
        bids = await _bidService.GetMostRecentBidsByBidderId();
        arts = await _artService.GetAllArts();
        Console.WriteLine(arts);
        // var usersSaved = await Http.GetFromJsonAsync<List<User>>("sample-data/test.json");
        // if (usersSaved.Any())
        // {
        //     users = usersSaved;
        //     activeUser = usersSaved.Take(1).First();


        // }
        // var bidsSaved = await Http.GetFromJsonAsync<List<Bid>>("sample-data/test_bids.json");
        // if (bidsSaved.Any())
        // {
        //     Console.WriteLine(bids);
        //     bids = bidsSaved;

        // }
        // var artSaved = await Http.GetFromJsonAsync<List<Art>>("sample-data/test_art.json");
        // if (artSaved.Any())
        // {
        //     arts = artSaved.Where(x => x.SellerId == activeUser.UserId).ToList();



        // }
    }
    public string getBidImage(Guid artId)
    {
        var art = arts.Where(x => x.ArtId == artId).FirstOrDefault();

        if (art != null)
        {

            return art.ArtImage;
        }
        return "";

    }
    public string getBidName(Guid artId)
    {
        var art = arts.Where(x => x.ArtId == artId).FirstOrDefault();
        if (art != null)
        {

            return art.Name;
        }
        return "";

    }

    public string showStringState(bool IsWon,bool IsClosed, Bid bid)
    {
        // Console.WriteLine(IsClosed);
        // Console.WriteLine(IsWon);
        // Console.WriteLine(bid.highestBid);

        if (IsClosed && IsWon)
        {
            // order.BidId = bid.bidId;
            return "Won";
        }
        else if (IsClosed && !IsWon)
        {
            return "Lost";

        }
        else
        {
            return "Bidding open";

        }

    }

    public string updatebutton(string State)
    {
        if (State == "Won")
        {

            return "Checkout";
        }
        else if (State == "Lost")
        {
            return "Gallery";

        }
        else
        {
            return "Bid again";

        }

    }
    public async Task HandleButtonClick(Bid activeBid, string state)
    {
       
        if (state == "Won")
        {
            order.BidId = activeBid.bidId;
            await _orderService.MakeOrder(order);
            var userId = await _localStorage.GetItemAsStringAsync("userId");
            var orders = await _orderService.GetOrdersByUserId(new Guid(userId));
            var orderPlaced = orders.Where(x => x.BidId == order.BidId).FirstOrDefault();
            if (orderPlaced != null)
            {
                _navigationManager.NavigateTo($"/checkout/{orderPlaced.OrderId}", forceLoad: true);
            }
        }
        else if (state == "Lost")
        {
            _navigationManager.NavigateTo("/auctionbuy");
        }
        else
        {
            _navigationManager.NavigateTo($"/auctionbuy/update/{activeBid.artId}");
        }
        
    }

}
